The resultant database needed some modification to help develop the desired tool. The following SQL queries were executed in the database schema. 

1. The gender given in the csv was in binary numbers - 1 for female, 0 for male. This caused an ambiguity because the gender of the members with age = 0 (meaning 
that there is no more members in that household) was also 0 while the male data was assigned to 0. The following SQL code will erase the ambiguity.
  UPDATE `table_household` SET `gender_M1` = '-' WHERE `age_M1` = '0' 
This command must be repeated for each column corresponding to the gender of the 10 household members.

2. To help filter the data, an extra column was added in each of the tables - table_household_age, table_household_gender, table_household_income, 
and table_household_expenditure. To update this column based on the values of the other column/s, the following codes are necessary:
i) For table_household_age, add a new column to the database and name the column by a name of your choice. I named it Status. Give it VARCHAR datatype with length 400. 
Once the column is created, run the following commands: 
  UPDATE `table_household_age` SET `Status` = 'Single Parent/Grandparent' WHERE `age_M1` - `age_M2` >= '18' (18 was taken because it is the legal age to bear a child in India.)
  UPDATE `table_household_age` SET `Status` = 'Nuclear Family' WHERE `age_M1` - `age_M2` < '18'
  UPDATE `table_household_age` SET `Status` = 'Childless Family' WHERE `age_M3` = '0'
  UPDATE `table_household_age` SET `Status` = 'Single Member' WHERE `age_M2` = '0'
ii) For table_household_gender, add a new column to the database and name the column by a name of your choice. I named it lead_member. Give it VARCHAR datatype with length 400. 
Once the column is created, run the following commands:
  UPDATE `table_household_gender` SET `lead_member` = `F` WHERE `gender_M1` = '1'
  UPDATE `table_household_gender` SET `lead_member` = `M` WHERE `gender_M1` = '0'
iii) For table_household_income, add a new column to the database and name the column by a name of your choice. I named it below_poverty_line. Give it VARCHAR datatype with length 400. 
Once the column is created, run the following commands:
  UPDATE `table_household_income` SET `below_poverty_line` = 'Y' WHERE `total_income` < '2092.25'
  UPDATE `table_household_income` SET `below_poverty_line` = 'N' WHERE `total_income` >= '2092.25'
iv) For table_household_expenditure, add a new column to the database and name the column by a name of your choice. I named it below_poverty_line. Give it VARCHAR datatype with length 400. 
Once the column is created, run the following commands:
  UPDATE `table_household_expenditure` SET `below_poverty_line` = 'Y' WHERE (`total_expenditure` < 1766.5) AND (`region` = 'PHH')
  UPDATE `table_household_expenditure` SET `below_poverty_line` = 'Y' WHERE (`total_expenditure` < 1441.5) AND (`region` = 'CHH' OR `region` = 'KHH`)
  UPDATE `table_household_expenditure` SET `below_poverty_line` = 'N' WHERE (`total_expenditure` >= 1766.5) AND (`region` = 'PHH')
  UPDATE `table_household_expenditure` SET `below_poverty_line` = 'Y' WHERE (`total_expenditure` >= 1441.5) AND (`region` = 'CHH' OR `region` = 'KHH`)
